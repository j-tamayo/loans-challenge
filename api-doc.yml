swagger: "2.0"
info:
  version: "0.0.1"
  title: "Examen Backend Cash Online"
  contact:
    email: "juni00r.tamayo@gmail.com"
host: "localhost:6868"
tags:
- name: "users"
- name: "user"
- name: "loans"
schemes:
- "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User info"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid input"
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserWithId"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserWithId"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Deletes an user ann all its loans"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "User not found"
  /users/{id}/loans:
    post:
      tags:
      - "loans"
      summary: "Add a loan to user"
      description: ""
      operationId: "addLoan"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to add loan"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "User info"
        required: true
        schema:
          $ref: "#/definitions/Loan"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoanResponse"
        "404":
          description: "User not found"
  /loans:
    get:
      tags:
      - "loan"
      summary: "Get loans"
      description: "Returns list of loans"
      operationId: "getLoans"
      produces:
      - "application/json"
      parameters:
      - name: "page"
        in: "query"
        description: "number of page to retrieve"
        required: false
        type: "integer"
        format: "int64"
      - name: "size"
        in: "query"
        description: "number of users per page"
        required: false
        type: "integer"
        format: "int64"
      - name: "user_id"
        in: "query"
        description: "id of user to filter"
        required: false
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LoanResponse"
        "404":
          description: "User not found"
definitions:
  User:
    type: "object"
    required:
    - "email"
    - "firstNme"
    - "lastName"
    properties:
      email:
        type: "string"
        example: "test@test.com"
      firstName:
        type: "string"
        example: "Andres"
      lastName:
        type: "string"
        example: "Perez"
  UserWithId:
    type: "object"
    required:
    - "email"
    - "firstNme"
    - "lastName"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      email:
        type: "string"
        example: "test@test.com"
      firstName:
        type: "string"
        example: "Andres"
      lastName:
        type: "string"
        example: "Perez"
  Loan:
    type: "object"
    required:
    - "total"
    properties:
      total:
        type: "number"
        example: 2500
  LoanResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      total:
        type: "number"
        example: 2500
      userId:
        type: "integer"
        format: "int64"
        example: 1
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"